#!/bin/sh

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"

export PATH="${PATH}:/usr/script"

if [ -d /home/root ]; then
	export HOME=/home/root
	cd
fi

LIBS=@libdir@/libopen.so.0.0.0

# Enigma main loop.
while : ; do
	# Show bootlogo on enigma2 start
	if [ -x @bindir@/showiframe ]; then
		if [ -f @sysconfdir@/enigma2/backdrop.mvi ]; then
			@bindir@/showiframe @sysconfdir@/enigma2/backdrop.mvi
		elif [ -f @sysconfdir@/enigma2/bootlogo.mvi ]; then
			@bindir@/showiframe @sysconfdir@/enigma2/bootlogo.mvi
		elif [ -f @datadir@/bootlogo.mvi ]; then
			@bindir@/showiframe @datadir@/bootlogo.mvi
		fi
	fi

	# Hook to execute scripts always before enigma2 start.
	if [ -x "@bindir@/enigma2_pre_start.sh" ]; then
		"@bindir@/enigma2_pre_start.sh"
	fi

	# Start enigma
	sync
	# Set the debug level to be used for enigma2 logging.
	if [ -z "${ENIGMA_DEBUG_LVL}" ]; then
		DEBUGLEVEL=`sed -En 's|^config\.crash\.debugLevel=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGLEVEL}" ] || DEBUGLEVEL="3"
		DEBUG_LVL="${DEBUGLEVEL}"
	else
		DEBUG_LVL="${ENIGMA_DEBUG_LVL}"
	fi

	# Set time format used to prefix each line in the debug logs.
	DEBUGTIME=`sed -En 's|^config\.crash\.debugTimeFormat=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
	[ -n "${DEBUGTIME}" ] || DEBUGTIME="2"
	DEBUG_TIME="${DEBUGTIME}"

	if [ "${DEBUG_LVL}" -lt "4" ]; then
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2"
	else
		DEBUGDIR=`sed -En 's|^config\.crash\.debugPath=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGDIR}" ] && [ -d "${DEBUGDIR}" ] || DEBUGDIR="/home/root/logs/"
		# Remove old logfiles.
		KEEP=`sed -En 's|^config\.crash\.debugFileCount=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${KEEP}" ] || KEEP="5"
		for FILE in `ls -t "${DEBUGDIR}"enigma2_debug_*.log`; do
			let "KEEP--"
			if [ "${KEEP}" -lt "1" ]; then
				rm "${FILE}"
			fi
		done
		# Today's log file.
		FILE="${DEBUGDIR}enigma2_debug_$(date +%Y-%m-%d_%H-%M-%S).log"
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2" >> "${FILE}" 2>&1
	fi


	# Enigma2 exit codes:
	#
	#  1 - halt
	#  2 - reboot
	#  3 - restart enigma
	#  4 - front processor upgrade
	#  5 - install new settings
	#  7 - manufacturer reset
	# 42 - offline update
	# 43 - restart for autoinstall
	#
	# >128 signal

	RET=$?
	case $RET in
		1)
			/sbin/halt
			;;
		2)
			/sbin/reboot
			;;
		3)
			;;
		4)
			/sbin/rmmod lcd
			"@sbindir@/fpupgrade" --upgrade 2>&1 | tee /home/root/fpupgrade.log
			sleep 1;
			/sbin/rmmod fp
			/sbin/modprobe fp
			/sbin/reboot
			;;
		5)
			if ! grep -q config.misc.RestartUI /etc/enigma2/settings; then
				echo "config.misc.RestartUI=true" >>/etc/enigma2/settings
			fi
			;;
		7)
			rm -R /etc/enigma2
			;;
		42)
			df -P | grep -v "tmpfs " | awk '{print $6}' | tail -n +3 > /tmp/upgrade_mountpoints.txt
			while read LINE; do
				if [ -f "${LINE}/var/lib/opkg/status" ]; then
				DESTS="${DESTS}" --add-dest "${LINE}":"${LINE}"
			fi
			done < /tmp/upgrade_mountpoints.txt
			# Bind the console (when available).
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			PREVUPD="0"
			CURRUPD="999"
			opkg update 2>&1 | tee /home/root/opkgupgrade.log
			while [ "${CURRUPD}" -gt "0" ] && [ "${CURRUPD}" -ne "${PREVUPD}" ]; do
				opkg upgrade "${DESTS}" 2>&1 | tee -a /home/root/opkgupgrade.log
				PREVUPD="${CURRUPD}"
				CURRUPD=`opkg list-upgradable | wc -l`
				echo "===> ${CURRUPD} PACKAGE(S) REMAINING" >> /home/root/ipkupgrade.log
			done
			/sbin/reboot
			;;
		43)
			# Auto install and autobackup.
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			/etc/init.d/settings-restore.sh
			/etc/init.d/avahi-daemon stop
			ifdown eth1
			ip addr flush dev eth1 scope global
			ifdown eth0
			ip addr flush dev eth0 scope global
			/etc/init.d/networking stop
			killall -9 udhcpc
			rm /var/run/udhcpc*
			/etc/init.d/dbus-1 reload
			/etc/init.d/networking start
			/etc/init.d/avahi-daemon start
			if [ ! -f /etc/.doNotAutoinstall ]; then
				touch /etc/.doAutoinstall
			else
				rm -f /etc/.doNotAutoInstall
			fi
			break
			;;
		*)
			break
			;;
	esac

done
